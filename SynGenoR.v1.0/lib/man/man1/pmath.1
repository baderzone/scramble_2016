.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PMATH 1"
.TH PMATH 1 "2012-10-23" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pmath \- simple command line interface to Math::Cephes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  bash> pmath
\&
\& Interactive interface to the Math::Cephes module.
\& TermReadLine enabled. Type \*(Aqhelp\*(Aq or \*(Aq?\*(Aq  for help.
\&
\& pmath> setprec 4
\&         display set to 4 decimal places
\& pmath> cos($PI)
\&         \-1.0000
\& pmath> acos(%)
\&          3.1416
\& pmath> q
\& bash>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script provides a simple command line interface to the
\&\f(CW\*(C`Math::Cephes\*(C'\fR module. If available, it will use the \f(CW\*(C`Term::ReadKey\*(C'\fR 
and \f(CW\*(C`Term::ReadLine::Perl\*(C'\fR or \f(CW\*(C`Term::ReadLine::GNU\*(C'\fR modules to
provide command line history and word completion.
.PP
Typing \f(CW\*(C`help\*(C'\fR or \f(CW\*(C`?\*(C'\fR alone will provide a list of help topics
grouped by major category name. \f(CW\*(C`help category\*(C'\fR will provide 
a listing and short description of each function within the
named category. \f(CW\*(C`help function\*(C'\fR will provide a description and
synopsis of the named function.
.PP
Entering an expression that returns a single value, such as 
\&\f(CW\*(C`sin($x)\*(C'\fR, or one that returns multiple values, such as
\&\f(CW\*(C`airy($x)\*(C'\fR, will result in all return values being printed.
The last (successful) single value returned is saved as the
\&\f(CW\*(C`%\*(C'\fR symbol (as in Maple), so that one can do
.PP
.Vb 5
\&     pmath> sin($PI/2)
\&            1
\&     pmath> asin(%)
\&            1.570796
\&     pmath>
.Ve
.PP
The number of decimal places displayed can be set to \f(CW\*(C`j\*(C'\fR using
\&\f(CW\*(C`setprec j\*(C'\fR:
.PP
.Vb 5
\&     pmath> setprec 8
\&             display set to 8 decimal places
\&     pmath> $PI
\&             3.14159265
\&     pmath>
.Ve
.PP
Multiple statements can be entered on a line, such as
     pmath> \f(CW$x\fR=1; \f(CW$y\fR=exp($x); printf(\*(L"\etexp(%5.2f)=%5.2f\en\*(R",$x,$y);
             exp( 1.00)= 2.72
     pmath>
.PP
or on multiple lines using \f(CW\*(C`\e\*(C'\fR as a continuation signal:
.PP
.Vb 5
\&    pmath> $x = 1; \e
\&           $y = exp($x); \e
\&            printf("exp(%5.2f)=%5.2f\en", $x, $y);
\&             exp( 1.00)= 2.72
\&    pmath>
.Ve
.PP
To quit the program, enter \f(CW\*(C`q\*(C'\fR, \f(CW\*(C`quit\*(C'\fR, or \f(CW\*(C`exit\*(C'\fR.
.PP
The \f(CW\*(C`Math::Cephes\*(C'\fR module has some support for handling
fractions and complex numbers through the \f(CW\*(C`Math::Cephes::Fraction\*(C'\fR
and \f(CW\*(C`Math::Cephes::Complex\*(C'\fR modules. For fractions, one can use the
\&\f(CW\*(C`fract()\*(C'\fR function to create a fraction object, and then use 
these in a fraction routine:
.PP
.Vb 5
\&    pmath> $f=fract(1,3); $g=fract(4,3); $f\->radd($g);
\&            5/3
\&    pmath> mixed(%)
\&            1 2/3
\&    pmath>
.Ve
.PP
Similarly, for complex numbers one can use the \f(CW\*(C`cmplx()\*(C'\fR
function to create a complex number object, and then use 
these in a complex number routine:
.PP
.Vb 3
\&    pmath> $f=cmplx(1,3); $g=cmplx(4,3); $f\->cadd($g);
\&            5+6 i
\&    pmath>
.Ve
.PP
See Math::Cephes::Polynomial for an interface to some
polynomial routines, and Math::Cephes::Matrix for some
matrix routines.
.SH "BUGS"
.IX Header "BUGS"
Probably. Please report any to Randy Kobes <randy@theoryx5.uwinnipeg.ca>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Math::Cephes, Math::Cephes::Fraction, Math::Cephes::Complex,
Math::Cephes::Polynomial and Math::Cephes::Matrix.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This script is copyrighted, 2000, 2002, by Randy Kobes. It may be 
distributed under the same terms as Perl itself.
